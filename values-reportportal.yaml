# ReportPortal values for GLAuth Helm Chart
replicaCount: 1

image:
  repository: glauth/glauth
  pullPolicy: IfNotPresent
  tag: "v2.3.2"

service:
  # For on-premises: Use NodePort instead of LoadBalancer
  type: NodePort
  ldapPort: 3893
  apiPort: 5555
  # Custom NodePorts for on-premises (avoid conflicts with other services)
  nodePorts:
    ldap: 30389  # Custom NodePort for LDAP (30000-32767 range)
    api: 30555   # Custom NodePort for API (30000-32767 range)
  
  # LoadBalancer specific annotations (for cloud environments)
  annotations:
    # service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # For AWS
    # service.beta.kubernetes.io/azure-load-balancer-internal: "false"  # For Azure
    # service.beta.kubernetes.io/gce-load-balancer-type: "External"  # For GCP
  
  # Alternative: NodePort configuration (uncomment if LoadBalancer is not available)
  # type: NodePort
  # ldapPort: 3893
  # apiPort: 5555
  # nodePorts:
  #   ldap: 30389  # Custom NodePort for LDAP (30000-32767 range)
  #   api: 30555   # Custom NodePort for API (30000-32767 range)

ingress:
  enabled: true
  className: "nginx"
  # TCP ingress for LDAP (requires nginx-ingress with TCP config)
  tcp:
    enabled: false  # Set to true if your nginx-ingress supports TCP
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
  hosts:
    - host: beta-glauth.epmrpp.reportportal.io
      paths:
        - path: /api(/|$)(.*)
          pathType: Prefix
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 50m
    memory: 64Mi

# ReportPortal GLAuth Configuration
appConfig: |
  [ldap]
    enabled = true
    listen = "0.0.0.0:3893"

  [ldaps]
    enabled = false

  [api]
    enabled = true
    internals = true
    tls = false
    listen = "0.0.0.0:5555"

  [backend]
    datastore = "config"
    baseDN = "dc=example,dc=com"

  [behaviors]
    IgnoreCapabilities = false
    LimitFailedBinds = true
    NumberOfFailedBinds = 3
    PeriodOfFailedBinds = 10
    BlockFailedBindsFor = 60
    PruneSourceTableEvery = 600
    PruneSourcesOlderThan = 600

  [[users]]
    name = "tesla"
    sn = "Tesla"
    mail = "tesla@example.com"
    uidnumber = 5001
    primarygroup = 5501
    loginShell = "/bin/bash"
    homeDir = "/home/user"
    # Password: password (SHA256)
    passsha256 = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8"
    [[users.customattributes]]
      displayName = ["Nikola Tesla"]
      objectClass = ["user"]
    [[users.capabilities]]
      action = "search"
      object = "*"

  [[users]]
    name = "einstein"
    sn = "Einstein"
    mail = "einstein@example.com"
    uidnumber = 5002
    primarygroup = 5501
    loginShell = "/bin/bash"
    homeDir = "/home/user"
    # Password: password (SHA256)
    passsha256 = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8"
    [[users.customattributes]]
      displayName = ["Albert Einstein"]
      objectClass = ["user"]
    [[users.capabilities]]
      action = "search"
      object = "*"

  [[groups]]
    name = "users"
    gidnumber = 5501